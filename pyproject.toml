[project]
name = "sampleproject"  # Required

# For a discussion on single-sourcing the version, see
# https://packaging.python.org/guides/single-sourcing-package-version/
dynamic = ["version", "dependencies", "optional-dependencies"] 

# This is a one-line description or tagline of what your project does. This
# corresponds to the "Summary" metadata field:
# https://packaging.python.org/specifications/core-metadata/#summary
description = "A sample Python project"  # Optional

readme = "README.md" # Optional

# Specify which Python versions you support. In contrast to the
# 'Programming Language' classifiers above, 'pip install' will check this
# and refuse to install the project if the version does not match. See
# https://packaging.python.org/guides/distributing-packages-using-setuptools/#python-requires
requires-python = ">=3.9"

# This should be your name or the name of the organization who originally
# authored the project, and a valid email address corresponding to the name
# listed.
authors = [
  {name = "A. Random Developer", email = "author@example.com" } # Optional
]

# This should be your name or the names of the organization who currently
# maintains the project, and a valid email address corresponding to the name
# listed.
maintainers = [
  {name = "A. Great Maintainer", email = "maintainer@example.com" } # Optional
]

# List additional groups of dependencies here (e.g. development
# dependencies). Users will be able to install these using the "extras"
# syntax, for example:
#
#   $ pip install sampleproject[dev]
#
# Similar to `dependencies` above, these must be valid existing
# projects.


[tool.setuptools.dynamic.optional-dependencies] # Optional

test = {file = ["requirements/test.txt"]}
build = {file = ["requirements/build.txt"]}
deploy = {file = ["requirements/deploy.txt"]}
local = {file = ["requirements/local.txt"]}

# The following would provide a command line executable called `sample`
# which executes the function `main` from this package when invoked.
#[project.scripts]  # Optional
#sample = "sample:main"

# This is configuration specific to the `setuptools` build backend.
# If you are using a different build backend, you will need to change this.
[tool.setuptools]
# If there are data files included in your packages that need to be
# installed, specify them here.
package-data = {"sample" = ["*.json"]}


[build-system]
# These are the assumed default build requirements from pip:
# https://pip.pypa.io/en/stable/reference/pip/#pep-517-and-518-support
requires = ["setuptools>=43.0.0", "wheel"]
build-backend = "setuptools.build_meta"

[tool.setuptools.dynamic]
version = {file = ["src/datascience_service/VERSION"]}
dependencies = {file = ["requirements/local.txt"]}


